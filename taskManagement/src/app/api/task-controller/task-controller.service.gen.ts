/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable,
  inject
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  ProjectPO,
  TaskPO
} from '.././model';



interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
        | HttpParams
        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: {includeHeaders?: string[]} | boolean;
  timeout?: number;
}



@Injectable({ providedIn: 'root' })
export class TaskControllerService {
  private readonly http = inject(HttpClient);
 loadProjectTasks<TData = TaskPO[]>(projectPO: ProjectPO, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 loadProjectTasks<TData = TaskPO[]>(projectPO: ProjectPO, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 loadProjectTasks<TData = TaskPO[]>(projectPO: ProjectPO, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  loadProjectTasks<TData = TaskPO[]>(
    projectPO: ProjectPO, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `http://localhost:8080/task`,options
    );
  }
 createTask<TData = TaskPO>(taskPO: TaskPO, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 createTask<TData = TaskPO>(taskPO: TaskPO, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 createTask<TData = TaskPO>(taskPO: TaskPO, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  createTask<TData = TaskPO>(
    taskPO: TaskPO, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post<TData>(
      `http://localhost:8080/task`,
      taskPO,options
    );
  }
 updateTask<TData = TaskPO>(id: number,
    taskPO: TaskPO, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 updateTask<TData = TaskPO>(id: number,
    taskPO: TaskPO, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 updateTask<TData = TaskPO>(id: number,
    taskPO: TaskPO, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  updateTask<TData = TaskPO>(
    id: number,
    taskPO: TaskPO, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post<TData>(
      `http://localhost:8080/task/${id}`,
      taskPO,options
    );
  }
 deleteTask<TData = void>(id: number, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 deleteTask<TData = void>(id: number, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 deleteTask<TData = void>(id: number, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  deleteTask<TData = void>(
    id: number, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.delete<TData>(
      `http://localhost:8080/task/${id}`,options
    );
  }
};

export type LoadProjectTasksClientResult = NonNullable<TaskPO[]>
export type CreateTaskClientResult = NonNullable<TaskPO>
export type UpdateTaskClientResult = NonNullable<TaskPO>
export type DeleteTaskClientResult = NonNullable<void>
