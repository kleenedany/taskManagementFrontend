/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable,
  inject
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  ProjectPO
} from '.././model';



interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
        | HttpParams
        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: {includeHeaders?: string[]} | boolean;
  timeout?: number;
}



@Injectable({ providedIn: 'root' })
export class ProjectControllerService {
  private readonly http = inject(HttpClient);
 loadAllProjects<TData = ProjectPO[]>( options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 loadAllProjects<TData = ProjectPO[]>( options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 loadAllProjects<TData = ProjectPO[]>( options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  loadAllProjects<TData = ProjectPO[]>(
     options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `http://localhost:8080/projects`,options
    );
  }
 createProject<TData = ProjectPO>(projectPO: ProjectPO, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 createProject<TData = ProjectPO>(projectPO: ProjectPO, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 createProject<TData = ProjectPO>(projectPO: ProjectPO, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  createProject<TData = ProjectPO>(
    projectPO: ProjectPO, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post<TData>(
      `http://localhost:8080/projects`,
      projectPO,options
    );
  }
 updateProject<TData = ProjectPO>(id: number,
    projectPO: ProjectPO, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 updateProject<TData = ProjectPO>(id: number,
    projectPO: ProjectPO, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 updateProject<TData = ProjectPO>(id: number,
    projectPO: ProjectPO, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  updateProject<TData = ProjectPO>(
    id: number,
    projectPO: ProjectPO, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post<TData>(
      `http://localhost:8080/projects/${id}`,
      projectPO,options
    );
  }
 deleteProject<TData = void>(id: number, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 deleteProject<TData = void>(id: number, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 deleteProject<TData = void>(id: number, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  deleteProject<TData = void>(
    id: number, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.delete<TData>(
      `http://localhost:8080/projects/${id}`,options
    );
  }
};

export type LoadAllProjectsClientResult = NonNullable<ProjectPO[]>
export type CreateProjectClientResult = NonNullable<ProjectPO>
export type UpdateProjectClientResult = NonNullable<ProjectPO>
export type DeleteProjectClientResult = NonNullable<void>
